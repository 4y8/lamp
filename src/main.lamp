-- Standard Library ------------------------------------------------------------
undefined x = x;
id x = x;
const x _ = x;
flip f g x = f x g ;
(.) f g x = f (g x);

data Bool = True | False;

(||) x y = case x of { True -> True; False -> y };
(&&) x y = case x of { True -> y; False -> False };
not f = case f of
  { True -> False
  ; False -> True };

(==) = E;
(<=) = L;
(<>) x y = not (x == y);
(>=) x y = not (x <= y);

data Pair   = (,) x y;
fst x       = case x of { f, _ -> f };
snd x       = case x of { _, s -> s };
uncurry f x = x f;

data Maybe = Nothing | Just a;
get e = case e of
  { Nothing -> undefined
  ; Just x -> x };

(++) l l' =
  case l of
  { [] -> l'
  ; h : t -> h : (t ++ l') };

reverse l =
  case l of
  { [] -> []
  ; h : t -> reverse t ++ [h] };

map f l =
  case l of
  { [] -> []
  ; h : t -> f h : map f t };

foldr f acc l =
  case l of
  { [] -> acc
  ; h : t -> f h (foldr f acc t) };

foldl f acc l =
  case l of
  { [] -> acc
  ; h : t -> foldl f (f acc h) t };

head l =
  case l of
  { [] -> undefined
  ; h : _ -> h };

tail l =
  case l of
  { [] -> undefined
  ; _ : t -> t };

cmp_list l l' =
  case l of
  { [] ->
    case l' of
    { [] -> True
    ; _ : _ -> False }
  ; h : t -> case l' of
    { [] -> False
    ; h' : t' -> (h == h') (cmp_list t t') False }};

last l =
  case l of
  { [] -> undefined
  ; h : t -> case t of
    { [] -> h
    ; _ : _ -> last t }};

find_list a l =
  case l of
  { [] -> undefined
  ; h : t ->
    (cmp_list (fst h) a)
      0
      (find_list a t + 1) };

length = foldr (\_ -> (+) 1) 0;

elems l e =
  case l of
  { [] -> False
  ; h : t -> cmp_list h e True (elems t e) };

lookup l key =
  case l of
  { [] -> Nothing
  ; x : xs -> (key == fst x) (Just (snd x)) (lookup xs key)};

--------------------------------------------------------------------------------

-- Parser ----------------------------------------------------------------------

combinators = "SICKBEL+-:*";

is_comb v l =
  case l of
  { [] -> False
  ; h : t -> (cmp_list v [h]) True (is_comb v t) };

pure x = \inp -> Just (x, inp);
fail = const Nothing;
bind f m = case m of
  { Nothing -> Nothing
  ; Just x -> x f };

(<*>) p q = \inp -> bind (\a t -> bind (\b u -> pure (a b) u) (q t)) (p inp);
(<*>|) p q = \inp -> bind (\a t -> bind (\b u -> pure (a b) u) (q id t)) (p inp);
(<|>) p q = \inp ->
  case p inp of
  { Nothing -> q inp
  ; Just x -> Just x };

(<$>) f p = pure f <*> p;

(<$) f p = const <$> pure f <*> p;
(<*) p q = const <$> p      <*> q;
(*>) p q = id    <$  p      <*> q;

opt def x = x <|> pure def;
many p = opt [] ((:) <$> p <*>| (\_ -> many p));
many1 p = (:) <$> p <*> many p;
appall x l =
  case l of
  { [] -> x
  ; h : t -> appall (h x) t };
chainl1 op p = appall <$> p <*> many (flip <$> op <*> p);
choice = foldr (<|>) fail;

sepBy1 sep p = (:) <$> p <*> many (sep *> p);
sepBy sep p  = opt [] (sepBy1 sep p);

sat f inp =
  case inp of
  { [] -> Nothing
  ; h : t -> f h (pure h t) Nothing };

char c = sat ((==) c);
range l r = sat (\x -> (l <= x) && (x <= r));
lower = range 'a' 'z';
upper = range 'A' 'Z';
letter = lower <|> upper;
ide = letter <|> (pure '?' <* char ''') <|> char '_';
digit = range '0' '9';

data Expr = Com [Char] | Var [Char] | App Expr Expr | Lam [Char] Expr;
(@) = App;

any = sat (const const);

space = char ' ';
newline = char '
';
tab = char '	';

nul = space
  <|> (tab
  <|> (newline
  <|> (char '-'
   <*  (char '-'
    *> many (sat (\x -> x <> '
'))))));

blank p = many nul
       *> p
      <*  many nul;

word l =
  case l of
  { [] -> pure []
  ; h : t -> (:) <$> char h <*> word t };

op = char ':' <|>
    (char '=' <|>
    ((pure '~' <* char '|') <|>
    (char '+' <|>
    (char '-' <|>
    ((pure '?' <* char ',') <|>
    ((pure '^' <* char '.') <|>
    (char '&' <|>
    (char '<' <|>
    (char '*' <|>
    (char '>' <|>
    (char '$' <|>
     char '@'))))))))))); -- choice (map char operators);

reserved_ops = ["->"; "~"];
opp = \inp ->
  case (many op) inp of
  { Nothing -> Nothing
  ; Just x ->
    case elems reserved_ops (fst x) of
    { True -> Nothing
    ; False -> Just x}
  };


reserved_names = ["data"; "where"; "case"; "of"];
name_ide = (:) <$> ide <*> many (ide <|> digit);
name = \inp ->
  case name_ide inp of
  { Nothing -> Nothing
  ; Just x -> elems reserved_names (fst x) Nothing (Just x) };

lambdaP = (char '\'
       *> ((flip wrap_lam . reverse)
      <$> many (blank name)
      <*> (char '-'
       *> (char '>'
       *> (many nul
       *> expr)))));

chr c = Com ['"'] ++ ((== c '"') ['\'; '"'] [c]) ++ ['"'];

charP = char '''
     *> ((chr <$> any)
    <*  char ''');

str l =
  case l of
  { [] -> Com "K"
  ; h : t -> Com ":" @ chr h @ str t };

dquote = '"'; --"

stringP = char dquote
       *> ((str <$> many (sat (\x -> x <> dquote)))
      <*  char dquote);

lst l =
  case l of
  { [] -> Com "K"
  ; h : t -> Com ":" @ h @ lst t };

listP = lst
    <$> (char '['
     *> (sepBy (blank (char ';')) expr
    <*  char ']'));

numberP = Com
      <$> many1 digit;

wrap_app_lam b e =
  case b of
  { Com _ -> e
  ; Var _ -> e
  ; App l r -> case r of
               { Com _ -> e
	       ; Var v -> wrap_app_lam l (Lam v e)
	       ; App _ _ -> e
	       ; Lam _ _ -> e }
  ; Lam _ _ -> e };

wrap_appl e l =
  case l of
  { [] -> e
  ; h : t -> wrap_appl (App e h) t };

arr = wrap_app_lam
  <$> blank expr
  <*  word "->"
  <*> blank expr;

caseP = wrap_appl
    <$  word "case"
    <*> blank expr
    <*  word "of"
    <*  blank (char '{')
    <*> sepBy1 (blank (char ';')) arr
    <*  blank (char '}');

varP = (\v -> is_comb v combinators (Com v) (Var v))
   <$> (name
   <|> (char '(' *> blank opp <* char ')'));

parentP = char '(' *> blank expr <* char ')';
atomP = parentP
    <|> (charP
    <|> (varP
    <|> (lambdaP
    <|> (stringP
    <|> (listP
    <|> (numberP
    <|> (caseP)))))));

appP = chainl1 (blank (pure App)) atomP;

expr = chainl1 ((\x y z ->
		(is_comb x combinators (Com x) (Var x)) @ y @ z)
		<$> blank opp) appP;

wrap_lam e l =
  case l of
  { [] -> e
  ; h : t -> wrap_lam (Lam h e) t };

app_length e =
  case e of
  { Com _ -> 0
  ; Var _ -> 0
  ; App l _ -> 1 + app_length l
  ; Lam _ _ -> 0 };

make_clist n i =
  (n == 0)
    []
    ([i] : make_clist (n - 1) (i + 1))
  ;

make_olist n i =
  (n == 0)
    []
    ((n == i)
      ("a?"  : make_olist (n - 1) i)
      (""   : make_olist (n - 1) i))
  ;

wrap_app e l =
  case l of
  { [] -> e
  ; h : t -> wrap_app (e @ Var h) t };

app_name e =
  case e of
  { Com _ -> undefined
  ; Var v -> v
  ; App l _ -> app_name l
  ; Lam _ _ -> undefined };

decls_of_patterns l n i =
  case l of
  { [] -> []
  ; h : t ->
    app_name h,
    wrap_lam
      (wrap_app (Var "a?") (make_clist (app_length h) 'a'))
      (make_olist n i ++ reverse (make_clist (app_length h) 'a')) :
    decls_of_patterns t n (i + 1) };

data_decl =
      (\x -> decls_of_patterns x (length x) 1)
  <$  word "data"
  <*  blank name
  <*  blank (char '=')
  <*> sepBy1 (blank (char '|')) expr
  <*  char ';';

equal = (flip wrap_lam . reverse)
    <$> many (blank name)
    <*  blank (char '=')
    <*> expr;

fun_decl = (\f s -> [f, s])
       <$> (name <|> (char '(' *> blank opp <* char ')'))
       <*> blank equal
       <*  char ';';

top_level = fun_decl <|> data_decl;

--------------------------------------------------------------------------------

-- Scheme ----------------------------------------------------------------------

to_scheme e =
  case e of
  { Com v -> v
  ; Var v -> v
  ; App l r -> "(" ++ to_scheme l ++ " " ++ to_scheme r ++ ")"
  ; Lam v b -> "(lambda (" ++ v ++ ") " ++ to_scheme b ++ ")" };

to_scheme_decl d =
  case snd d of
  { Com _ -> "(define " ++ fst d ++ " " ++ to_scheme (snd d) ++ ")"
  ; Var _ -> "(define " ++ fst d ++ " " ++ to_scheme (snd d) ++ ")"
  ; App _ _ -> "(define " ++ fst d ++ " " ++ to_scheme (snd d) ++ ")"
  ; Lam v b -> "(define (" ++ fst d ++ " " ++ v ++ ") " ++ to_scheme b ++ ")"};

--------------------------------------------------------------------------------

main = (foldr (++) [] .
	map to_scheme_decl .
	foldr (++) [] .
	fst .
	get .
	many (blank top_level));

-- EOF -------------------------------------------------------------------------
