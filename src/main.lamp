-- Types
Pair x y f = f x y;

Nothing x _ = x;
Just x f g  = g x;

Nil       = \f _ -> f;
(:) hd tl = \_ g -> g hd tl;

-- Combinators
id x = x;
const x _ = x;
fix x = x (fix x);
flip f x y = f y x;

(&) x f = f x;
($) f x = f x;

-- Lists
(++) l l' = l l' (\hd tl -> hd : (tl ++ l'));
ifNil l t f = l t (\_ _ -> f);
add r acc p = r (ifNil acc p ('`' : (acc ++ p)));
