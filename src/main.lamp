-- Types
(,) x y = \f -> f x y;

Nothing x _ = x;
Just x f g  = g x;

Nil       = \f _ -> f;
(:) hd tl = \_ g -> g hd tl;

-- Combinators
id x = x;
const x _ = x;
fix x = x (fix x);
flip f x y = f y x;

(&) x f = f x;
($) f x = f x;
(||) f g x y = f x (g x y);

-- Lists
(++) l l' = l l' (\hd tl -> hd : (tl ++ l'));
ifNil l t f = l t (\_ _ -> f);
head l = l undefined (\hd _ -> hd);
tail l = l undefined (\_ tl -> tl);

-- Parser

--(
closes h = (hd == ')') || (hd == ';');
add r acc p = r (ifNil acc p ('`' : (acc ++ p)));

sub r acc t = uncurry (add r acc) (r Nil t);

term acc s =
    s
     undefined
     (\hd tl -> (closes hd) (acc, tl) ((hd == '(') (sub term acc tl))) 
